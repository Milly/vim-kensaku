*kensaku.jax*				ローマ字による日本語検索機能を提供

Author:  Alisue <lambdalisue@gmail.com>
License: MIT License (See LICENSE)


=============================================================================
CONTENTS					*kensaku-contents*

INTRODUCTION			|kensaku-introduction|
REQUIREMENTS			|kensaku-requirements|
INTERFACE			|kensaku-interface|
  VARIABLES			  |kensaku-variables|
  FUNCTIONS			  |kensaku-functions|


=============================================================================
INTRODUCTION					*kensaku-introduction*

Kensaku (*kensaku.vim*) は Migemo を利用してローマ字のまま日本語検索を行う機能
を提供するプラグインです。既存の Migemo プラグインとは異なり JavaScript で実装
された jsmigemo を利用するため C/Migemo のインストールは不要です。

jemigemo		https://github.com/oguna/jsmigemo
C/Migemo		https://www.kaoriya.net/software/cmigemo/


=============================================================================
REQUIREMENTS					*kensaku-requirements*

denops.vim~
	An ecosystem for writing Vim/Neovim plugin in Deno.
	https://github.com/vim-denops/denops.vim


=============================================================================
INTERFACE					*kensaku-interface*

-----------------------------------------------------------------------------
VARIABLES					*kensaku-variables*

*g:kensaku_dictionary_url*
	ダウンロードする辞書ファイルの URL です。
	値を変更した場合は手動で |g:kensaku_dictionary_cache| に指定されている
	ファイルを削除する必要があります。

	デフォルトでは https://github.com/oguna/migemo-compact-dict-latest
	の v0.2 を利用します。

	Default: '...'

*g:kensaku_dictionary_cache*
	ダウンロードした辞書ファイルの格納先です。

	Default: `~/.cache/kensaku.vim/migemo-compact-dict`

*g:kensaku#rxop#vim*
*g:kensaku#rxop#javascript*
	正規表現で使う記号のプリセットです。 |kensaku#query()| で使用します。
>
	call kensaku#query("kensaku", {
	      \ 'rxop': g:kensaku#rxop#vim,
	      \})
	call kensaku#query("kensaku", {
	      \ 'rxop': g:kensaku#rxop#javascript,
	      \})
<
*g:kensaku_disable_v3_migration_warning*
	Kensaku v3 で適用された破壊的変更に関する警告メッセージを非表示にしま
	す。なお、このメッセージ自体は v3.0.1 以降で削除される予定です。

-----------------------------------------------------------------------------
FUNCTIONS					*kensaku-functions*

						*kensaku#query()*
kensaku#query({value}[, {option}])
	{value} をローマ字として解釈し、検索するための正規表現を返します。
>
	function! Search(value) abort
	  let @/ = a:value
	  normal! n
	endfunction

	call Search(kensaku#query('kensaku'))
<
	{option} には以下のパラメータがあります。

	"rxop"	正規表現に利用する記号文字のリストです。
		"[or, startGroup, endGroup, startClass, endClass, newline]" で
		表され、それぞれ以下の意味を持ちます。
		or		選択子 (alternation operator)。|/bar|
		startGroup	グループ化の開始。|/\(|
		endGroup	グループ化の終了。|/\)|
		startClass	文字クラスの開始。|/\[]|
		endClass	文字クラスの終了。|/\[]|
		newline		行末。|/\_s|
		デフォルト: |g:kensaku#rxop#vim|
>
	" :grep で kensaku.vim を使う
	command! -nargs=1 KensakuGrep call KensakuGrep(<q-args>)

	function! KensakuGrep(input) abort
	  if !executable('rg')
	    return
	  endif
	  let grepprg = &grepprg
	  set grepprg=rg\ -e\ $*\ --vimgrep
	  " :execute は '|' でコマンドを区切るのでエスケープ
	  execute 'grep' kensaku#query(a:input, {
	        \ 'rxop': ['\|', '(', ')', '[', ']', ''],
	        \})
	  let &grepprg = grepprg
	endfunction
<

						*kensaku#query_async()*
kensaku#query_async({value}, {success}[, {option}])
	|kensaku#query()| の非同期バージョンで、結果を {success} コールバックに
	渡します。

	{option} には以下のパラメータがあります。

	"rxop"		|kensaku#query()| と同じです。
	"failure"	エラー時に呼ばれるコールバック関数です。
>
	function! Search(value) abort
	  let @/ = a:value
	  normal! n
	endfunction

	call kensaku#query_async('kensaku', function('Search'), {
	      \ 'failure': { e -> ...},
	      \ 'rxop': ...,
	      \})
<

						*kensaku#set_roman_table()*
kensaku#set_roman_table({romanTable})
	ローマ字の変換ルールを定義します。azikなどに対応できます。
	{romanTable}は、[roman: string, hiragana: string, remain: number?]の配
	列です。romanがhiraganaに変換され、remainの数だけromanが残ります。例え
	ば、["qq", "っ", 1]は、「qq」を入力すると「っq」に変換されるルールにな
	ります。remainは省略可能で、その場合は0になります。
>
	call kensaku#set_roman_table([
	      \ ["qq", "っ", 1],
	      \ ["kz", "かん", 0],
	      \ ...
	      \])
<

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
